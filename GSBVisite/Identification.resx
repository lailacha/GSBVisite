<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>